name: "Build and Publish Docker image"

on:
  workflow_call:
    inputs:
      client:
        description: 'Client name'
        required: true
        type: string
      image_tag:
        description: 'Image tag'
        required: true
        type: string
      image_name:
        description: 'Image registry and name'
        required: true
        type: string
      cosign:
        required: false
        default: false
        type: boolean
        description: 'Run cosign on released image'
      support_platforms:
        required: false
        default: true
        type: boolean
        description: 'Support amd64/arm64'

    secrets:
      registry-username:
        required: true
      registry-password:
        required: true

jobs:
  build-image:
    name: Build image and upload to registry
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Quay.io
        env:
          QUAYIO_USERNAME: "${{ secrets.registry-nonex }}"
          QUAYIO_PASSWORD: "${{ secrets.registry-nonex2 }}"
        run: echo "lg${QUAYIO_USERNAME} pw${QUAYIO_PASSWORD}" && docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io

      - name: Build and push image
        if: ${{ inputs.support_platforms }}
        run: docker buildx build . --file build/Dockerfile --tag ${{ inputs.image_name }}:${{ inputs.image_tag }} --tag ${{ inputs.image_name }}:latest --build-arg image_version=${{ inputs.image_tag }} --build-arg client=${{ inputs.client }} --push --platform linux/amd64,linux/arm64

      - name: Build and push image without amd64/arm64 support
        if: ${{ !inputs.support_platforms }}
        run: docker buildx build . --file build/Dockerfile --tag ${{ inputs.image_name }}:${{ inputs.image_tag }} --tag ${{ inputs.image_name }}:latest --build-arg image_version=${{ inputs.image_tag }} --build-arg client=${{ inputs.client }} --push

      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.12.0'
      - name: sign kubescape container image
        if: ${{ inputs.cosign }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
            cosign sign --force ${{ inputs.image_name }}:latest
            cosign sign --force ${{ inputs.image_name }}:${{ inputs.image_tag }}

